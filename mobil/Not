iş bitince debug kapat mesajları vs bi incele.
sonra debug runtime da değiştirmek için bi arka kapı bul login olmadan yapılabilsin.

















ios icin path:      export PATH="$PATH:`pwd`/flutter/bin"



    didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data,




  pod 'Firebase/Core'
  pod 'Firebase/Analytics'
  pod 'Firebase/Crashlytics'
  pod 'Firebase/DynamicLinks'
  pod 'Firebase/Messaging'
  pod 'Firebase/RemoteConfig'























  animated menu (AppScreen):

  @override
  Widget build(BuildContext context) {
    this.preLoad(context);

    return getBasePage(context);
    
    //Size size = MediaQuery.of(context).size;
    double wd = 411;
    //size.width;
    double hg = 731;
    //size.height;

    return MaterialApp(
        home: Scaffold(
            body: Stack(
      fit: StackFit.expand,
      children: <Widget>[
        SideMenu(),
        AnimatedPositioned(
            top: 10, //0.2 * hg,
            bottom: 0, // 0.2 * wd,
            left: 50, // 0.6 * wd,
            right: 0, //-0.4 * wd,
            child: basePage,
            duration: const Duration(milliseconds: 300))
      ],
    )));
  }










  class ResponsiveCardGrid extends StatefulWidget {
  ResponsiveCardGrid(
      {Key? key,
      required Widget itemWidget,
      required List<dynamic> data,
      required List<int> itemSizes,
      required List<int> itemRatios})
      : super(key: key);

  @override
  _ResponsiveCardGridState createState() => _ResponsiveCardGridState();
}

class _ResponsiveCardGridState extends State<ResponsiveCardGrid> {
  @override
  Widget build(BuildContext context) {
    return Container(
      child: ResponsiveHelper(
        mobile: FileInfoCardGridView(
          crossAxisCount: 2,
          childAspectRatio: 1.3,
        ),
        tablet: FileInfoCardGridView(),
        desktop: FileInfoCardGridView(
          childAspectRatio:
              MediaQuery.of(context).size.width < 1400 ? 1.1 : 1.4,
        ),
      ),
    );
  }
}

class GridItem extends StatefulWidget {
  GridItem({Key? key, required dynamic item}) : super(key: key);

  @override
  _GridItemState createState() => _GridItemState();
}

class _GridItemState extends State<GridItem> {
  @override
  Widget build(BuildContext context) {
    return Container(
      child: Text("haber"),
    );
  }
}

class NewTile extends GridItem {
  NewTile({Key? key, required dynamic item}) : super(key: key, item: item);

  @override
  _NewTileState createState() => _NewTileState();
}

class _NewTileState extends State<NewTile> {
  @override
  Widget build(BuildContext context) {
    return Container(
       child: null,
    );
  }
}
/*

class FileInfoCardGridView extends StatelessWidget {
  const FileInfoCardGridView({
    Key? key,
    this.crossAxisCount = 4,
    this.childAspectRatio = 1,
  }) : super(key: key);

  final int crossAxisCount;
  final double childAspectRatio;

  @override
  Widget build(BuildContext context) {
    return GridView.builder(
      physics: NeverScrollableScrollPhysics(),
      shrinkWrap: true,
      itemCount: demoMyFiles.length,
      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: crossAxisCount,
        crossAxisSpacing: defaultPadding,
        mainAxisSpacing: defaultPadding,
        childAspectRatio: childAspectRatio,
      ),
      itemBuilder: (context, index) => Text("card"),
    );
  }
}
*/