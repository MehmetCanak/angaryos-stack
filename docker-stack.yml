version: "3.3"

services:

    #######       ADMINISTRATION       #######

    portainer:
        image: portainer/portainer
        ports:
            - 9000:9000
        command: -H unix:///var/run/docker.sock
        deploy:
            mode: replicated
            replicas: 1
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./services/portainer/data:/data 



    #######       REVERSE PROXY       #######

    traefik:
        image: traefik:alpine
        command: -c /etc/traefik.toml
        deploy:
            mode: replicated
            replicas: 1
        ports:
            - "8080:8080"
            - "443:443"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./services/traefic/traefik-stack.toml:/etc/traefik.toml
            - ./services/traefic/data/traefik.log:/etc/traefik.log
            - ./services/traefic/data/traefik-access.log:/etc/traefik-access.log
            - ./services/traefic/self.crt:/etc/self.crt
            - ./services/traefic/self.key:/etc/self.key
        networks:
            - frontend-nw
            - backend-nw

    test:
        image: containous/whoami:latest
        networks:
            - frontend-nw
        deploy:
            mode: replicated
            replicas: 2
            labels:
                traefik.frontend.rule: "PathPrefixStrip:/test"
                traefik.port: "80"
                traefik.enable: "true"
                traefik.backend: "test"
                traefik.docker.network: "angaryos_frontend-nw"


    #######       FRONTEND       #######

    frontend: 
        image: karapazar/angular-serve:0.16
        volumes:
            - ./frontend:/usr/src/app 
        networks:
            - frontend-nw
        deploy:
            mode: replicated
            replicas: 1
            labels:
                traefik.frontend.rule: "PathPrefix:/"
                traefik.port: "4200"
                traefik.enable: "true"
                traefik.backend: "frontend"
                traefik.docker.network: "angaryos_frontend-nw"



    #######       BACKEND       #######
 
    laravel:
        image: karapazar/laravel-php-fpm:0.52
        volumes:
            - ./backend:/var/www 
            - ./backend/php.ini:/usr/local/etc/php/conf.d/local.ini
            - ./services/geoserver/data:/var/geoserver
            - /var/run/docker.sock:/var/run/docker.sock 
        environment:
            SERVICE_NAME: app
            SERVICE_TAGS: dev
        deploy:
            mode: replicated
            replicas: 1
        networks:
            - backend-nw
            - db-nw
            - mq-nw

    laravelcron:
        image: karapazar/laravel-cron:0.18
        volumes:
            - ./backend:/var/www 
            - ./backend/php.ini:/usr/local/etc/php/conf.d/local.ini
        environment:
            SERVICE_NAME: app
            SERVICE_TAGS: dev
        deploy:
            mode: replicated
            replicas: 1
        networks:
            - backend-nw
            - db-nw
            - mq-nw
            
    laraveljobs:
        image: karapazar/laravel-jobs:0.4
        volumes:
            - ./backend:/var/www 
            - ./backend/php.ini:/usr/local/etc/php/conf.d/local.ini
        environment:
            SERVICE_NAME: app
            SERVICE_TAGS: dev
        deploy:
            mode: replicated
            replicas: 1
        networks:
            - backend-nw
            - db-nw
            - mq-nw

    nginx:
        image: nginx:alpine
        tty: true
        volumes:
            - ./backend:/var/www 
            - ./backend/nginx.conf:/etc/nginx/conf.d/app.conf
        deploy:
            mode: replicated
            replicas: 1
            labels:
                traefik.api.frontend.rule: "PathPrefix:/api"
                traefik.uploads.frontend.rule: "PathPrefix:/uploads"
                traefik.logs.frontend.rule: "PathPrefix:/logs"
                traefik.port: "80"
                traefik.enable: "true"
                traefik.backend: "nginx"
                traefik.docker.network: "angaryos_backend-nw"
        networks:
            - backend-nw

    memcached:
        image: memcached
        networks:
            - backend-nw



    #######       DB       #######

    postgresql:
        hostname: 'postgresql'
        image: kartoza/postgis:12.0
        environment:
            - POSTGRES_DB=postgres
            - POSTGRES_USER=postgres
            - POSTGRES_PASS=1234Aa.
            - ALLOW_IP_RANGE=0.0.0.0/0
        volumes:
            - ./services/postgresql/data:/var/lib/postgresql
        ports:
            - "5432:5432"
        networks:
            - db-nw



    #######       QUEUE FOR LOG       #######  

    rabbitmq:
        hostname: 'rabbitmq'
        image: rabbitmq:3-management
        ports:
            - "9001:15672"
        deploy:
            mode: replicated
            replicas: 1
        networks:
            - mq-nw
        environment:
            - RABBITMQ_ERLANG_COOKIE=1234
            - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
            - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
            - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_DEFAULT_VHOST}



    #######       LOG       #######  

    elasticsearch:
        hostname: 'elasticsearch'
        image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.5.4
        environment:
            ES_JAVA_OPTS: "-Xms108m -Xmx108m"
        networks:
            - elk-nw
        deploy:
            mode: replicated
            replicas: 1            
        volumes:
            - ./services/logs/elasticsearch/data:/usr/share/elasticsearch/data
            - ./services/logs/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml

    logstash:
        hostname: 'logstash'
        image: docker.elastic.co/logstash/logstash-oss:6.5.4
        volumes:
            - ./services/logs/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
            - ./services/logs/logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
        environment:
            LS_JAVA_OPTS: "-Xmx256m -Xms256m"
        networks:
            - elk-nw
            - mq-nw
        depends_on:
            - elasticsearch
        deploy:
            mode: replicated
            replicas: 1

    kibana:
        hostname: 'kibana'
        image: docker.elastic.co/kibana/kibana-oss:6.5.4
        ports:
            - "9002:5601"
        volumes:
            - ./services/logs/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
        networks:
            - elk-nw
        deploy:
            mode: replicated
            replicas: 1



    #######       GEOSERVER CLUSTER       #######

    geoserver:
        image: thinkwhere/geoserver:2.14
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "10"
        networks:
            - db-nw
            - backend-nw
        ports:
            - "9003:8080"
        deploy:
            mode: replicated
            replicas: 1
            labels:
                traefik.frontend.rule: "PathPrefix:/geoserver"
                traefik.port: "8080"
                traefik.enable: "true"
                traefik.backend: "geoserver"
                traefik.docker.network: "angaryos_backend-nw"
        environment:
            - GEOSERVER_LOG_LOCATION=/opt/geoserver/data_dir/logs/geoserver.log
        volumes:
            - ./services/geoserver/data:/opt/geoserver/data_dir
            - ./services/geoserver/tomcat_settings/setenv.sh:/usr/local/tomcat/bin/setenv.sh
            - ./services/geoserver/tomcat_settings/logs:/usr/local/tomcat/logs
            - ./services/geoserver/rasters:/root/Rasters
            - ./services/geoserver/font/Ubuntu-R.ttf:/usr/share/fonts/truetype/Ubuntu-R.ttf
    
    

networks:
    frontend-nw:
    backend-nw:
    db-nw:
    elk-nw:
    mq-nw: