/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.omersavas.kubismsasaustu.helpers;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.smartcardio.CardTerminal;
import javax.smartcardio.CardTerminals;
import javax.smartcardio.TerminalFactory;
import javax.swing.JOptionPane;
import sun.security.pkcs11.wrapper.PKCS11Exception;
import tr.gov.tubitak.uekae.esya.api.asn.x509.ECertificate;
import tr.gov.tubitak.uekae.esya.api.asn.x509.EName;
import tr.gov.tubitak.uekae.esya.api.cmssignature.CMSSignatureException;
import tr.gov.tubitak.uekae.esya.api.cmssignature.ISignable;
import tr.gov.tubitak.uekae.esya.api.cmssignature.SignableByteArray;
import tr.gov.tubitak.uekae.esya.api.cmssignature.attribute.EParameters;
import tr.gov.tubitak.uekae.esya.api.cmssignature.signature.BaseSignedData;
import tr.gov.tubitak.uekae.esya.api.cmssignature.signature.ESignatureType;
import tr.gov.tubitak.uekae.esya.api.common.ESYAException;
import tr.gov.tubitak.uekae.esya.api.common.crypto.BaseSigner;
import tr.gov.tubitak.uekae.esya.api.common.util.StringUtil;
import tr.gov.tubitak.uekae.esya.api.common.util.bag.Pair;
import tr.gov.tubitak.uekae.esya.api.smartcard.apdu.APDUSmartCard;
import tr.gov.tubitak.uekae.esya.api.smartcard.pkcs11.BaseSmartCard;
import tr.gov.tubitak.uekae.esya.api.smartcard.pkcs11.CardType;
import tr.gov.tubitak.uekae.esya.api.smartcard.pkcs11.LoginException;
import tr.gov.tubitak.uekae.esya.api.smartcard.pkcs11.P11SmartCard;
import tr.gov.tubitak.uekae.esya.api.smartcard.pkcs11.SmartCardException;
import tr.gov.tubitak.uekae.esya.api.smartcard.pkcs11.SmartOp;
import tr.gov.tubitak.uekae.esya.asn.util.AsnIO;

/**
 *
 * @author omers
 */
public class Imzalama 
{
    
    public boolean imzala(String str, String pass, String name) throws CMSSignatureException, SmartCardException, ESYAException, IOException
    {
        try {
            int dialogResult = JOptionPane.showConfirmDialog (null,
                    str,
                    "Bilgi",
                    JOptionPane.YES_NO_OPTION);
            if(dialogResult == JOptionPane.NO_OPTION)
                return false;

            BaseSignedData bs = new BaseSignedData();
        
            String t = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
            str += " (" + t + ")";
            ISignable content = new SignableByteArray(str.getBytes());
            bs.addContent(content);

            HashMap<String, Object> params = new HashMap<String, Object>();

            //if the user does not want certificate validation at generating signature,he can add 
            //P_VALIDATE_CERTIFICATE_BEFORE_SIGNING parameter with its value set to false
            //params.put(EParameters.P_VALIDATE_CERTIFICATE_BEFORE_SIGNING, false);

            //necessary for certificate validation.By default,certificate validation is done 
            params.put(EParameters.P_CERT_VALIDATION_POLICY, ImzalamaTestConstants.getPolicy());

            //By default, QC statement is checked,and signature wont be created if it is not a 
            //qualified certificate. 
            boolean checkQCStatement = ImzalamaTestConstants.getCheckQCStatement();

            //Get qualified or non-qualified certificate.
            ECertificate cert = ImzalamaSmartCardManager.getInstance().getSignatureCertificate(checkQCStatement, !checkQCStatement);
            
            BaseSigner signer = ImzalamaSmartCardManager.getInstance().getSigner(pass, cert);

            //add signer
            //Since the specified attributes are mandatory for bes,null is given as parameter 
            //for optional attributes
            bs.addSigner(ESignatureType.TYPE_BES, cert , signer, null, params);

            ImzalamaSmartCardManager.getInstance().logout();

            byte [] signedDocument = bs.getEncoded();
            //return new String(signedDocument);
            //return signedDocument.toString();
            //return bs.getEncoded().toString();
            //

            //Genel.Mesaj("Burada stringi return et hata olursa boş return et");
            //write the contentinfo to file
            AsnIO.dosyayaz(signedDocument,ImzalamaTestConstants.getDirectory() + "/" + name + ".p7s");

            return true;
                
        } catch (LoginException e) {
            Genel.Mesaj("Giriş yapılamadı! ("+ e.getMessage() +")");
                
        }catch (Exception e) {
            Hata.Gonder(e);
        }
        
        return false;
    }
}
