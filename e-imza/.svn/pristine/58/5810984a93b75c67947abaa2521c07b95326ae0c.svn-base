/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.omersavas.kubismsasaustu.models;

import com.omersavas.kubismsasaustu.helpers.Genel;
import com.omersavas.kubismsasaustu.helpers.Guvenlik;
import com.omersavas.kubismsasaustu.helpers.Hata;
import com.omersavas.kubismsasaustu.helpers.Sifreleme;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.InvalidKeyException;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;

/**
 *
 * @author omers
 */
public class Oturum {

    private String url, appUrl;
    public String token = "";

    public Oturum() {
        this.url = "https://cbs.kutahyaozid.gov.tr/";
    }
    
    private boolean tokenDoldur(String t) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException, FileNotFoundException, UnsupportedEncodingException
    {
        try {
             Sifreleme s = Genel.sifrelemeGetir();
        
            String fn = "files/token.koi";
            File f = new File(fn);
            if(f.exists()) f.delete();
            else f.createNewFile();

            PrintWriter writer = new PrintWriter(fn, "UTF-8");
            writer.print(s.sifrele(t));
            writer.close();

            token = t;
            return true;
        } catch (Exception e) {
            Hata.Gonder(e);
            return false;
        }
       
    }
    
    public boolean hatirlananKullaniciKontrol() throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException{
        try {
            Sifreleme s = Genel.sifrelemeGetir();
        
            String fn = "files/token.koi";
            File f = new File(fn);
            if(f.exists())
            {
                String t = s.sifreCoz(new String(Files.readAllBytes(Paths.get(fn))));
                
                if(t.length() == 0) 
                    f.delete();
                else{
                    String r = httpGet(url+"tr/app/tokenD/"+t+"/test");
                    if(r.equals("OK")) {
                        token = t;
                        return true;
                    }
                    else
                        f.delete();
                }
            } 
        } catch (Exception e) {
            Hata.Gonder(e);
        }
        
        return false;
    }

    private String tirnakTemizle(String s)
    {
        return s.replaceAll("'", "").replaceAll("\"", "");
    }
    
    public String httpGet(String u) throws MalformedURLException, IOException
    {
        try {
            StringBuilder result = new StringBuilder();
            URL url = new URL(u.replaceAll(" ", "%20"));
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
               result.append(line);
            }
            rd.close();

            return result.toString();
        } catch (Exception e) {
            Hata.Gonder(e);
            return "";
        }
    }
    
    public boolean mailIleGirisYap(String mail, String sifre) throws IOException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
        if(Guvenlik.girisDeneme++ == 5){
            Genel.Mesaj("Yeteri kadar deneme yaptınız! İzin verilmiyor...");
            return false;
        }
        
        String u = url + "tr/app/loginDesktop?";

        u += "mail=" + tirnakTemizle(mail);
        u += "&sifre=" + tirnakTemizle(sifre);
        u += "&dtype=4";
        
        String r = httpGet(u);
        
        if(r.substring(0, 2).equals("OK")){
            if(tokenDoldur(r.substring(2)))
                return true;
            else{
                Genel.Mesaj("Giriş yapıldı ama token oluşturulamadı! Yöneticiye başvurun.");
                return false;
            }
        }
        else
        {
            Genel.Mesaj("Mail/Şifre yanlış!");
            return false;
        }
    }
}
