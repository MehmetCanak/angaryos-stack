version: "3.3"

services:

    #######       ADMINISTRATION       #######

    portainer:
        image: portainer/portainer
        ports:
            - 9000:9000
        command: -H unix:///var/run/docker.sock
        deploy:
            mode: replicated
            replicas: 1
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./services/portainer/data:/data 
            - '/etc/localtime:/etc/localtime:ro'



    #######       REVERSE PROXY       #######

    traefik:
        image: traefik:alpine
        command: -c /etc/traefik.toml
        deploy:
            mode: replicated
            replicas: 1
        ports:
            - "8080:8080"
            - "443:443"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./services/traefic/traefik-stack.toml:/etc/traefik.toml
            - ./services/traefic/data/traefik.log:/etc/traefik.log
            - ./services/traefic/data/traefik-access.log:/etc/traefik-access.log
            - ./services/traefic/self.crt:/etc/self.crt
            - ./services/traefic/self.key:/etc/self.key
        networks:
            - frontend-nw
            - backend-nw
            


    #######       FRONTEND       #######

    frontend: 
        #image: karapazar/angular-serve:0.19
        image: karapazar/angular-serve-light:0.4
        volumes:
            #- ./frontend:/usr/src/app 
            - ./frontend/dist/light/:/usr/share/nginx/html
            - '/etc/localtime:/etc/localtime:ro'
        networks:
            - frontend-nw
        deploy:
            mode: replicated
            replicas: 1
            labels:
                traefik.frontend.rule: "PathPrefix:/"
                #traefik.port: "4200"
                traefik.port: "80"
                traefik.enable: "true"
                traefik.backend: "frontend"
                traefik.docker.network: "angaryos_frontend-nw"



    #######       BACKEND       #######
 
    laravel:
        image: karapazar/laravel-php-fpm:0.53
        volumes:
            - ./backend:/var/www 
            - ./backend/php.ini:/usr/local/etc/php/conf.d/local.ini
            - ./services/geoserver/data:/var/geoserver
            - /var/run/docker.sock:/var/run/docker.sock 
        environment:
            SERVICE_NAME: app
            SERVICE_TAGS: dev
        deploy:
            mode: replicated
            replicas: 1
        networks:
            - backend-nw
            - db-nw

    laravelcron:
        image: karapazar/laravel-cron:0.20
        volumes:
            - ./backend:/var/www 
            - ./backend/php.ini:/usr/local/etc/php/conf.d/local.ini
            - ./services/geoserver/data:/var/geoserver
            - /var/run/docker.sock:/var/run/docker.sock 
        environment:
            SERVICE_NAME: app
            SERVICE_TAGS: dev
        deploy:
            mode: replicated
            replicas: 1
        networks:
            - backend-nw
            - db-nw
            
    laraveljobs:
        image: karapazar/laravel-jobs:0.11
        volumes:
            - ./backend:/var/www 
            - ./backend/php.ini:/usr/local/etc/php/conf.d/local.ini
            - ./services/geoserver/data:/var/geoserver
            - /var/run/docker.sock:/var/run/docker.sock 
        environment:
            SERVICE_NAME: app
            SERVICE_TAGS: dev
        deploy:
            mode: replicated
            replicas: 1
        networks:
            - backend-nw
            - db-nw

    nginx:
        image: nginx:alpine
        tty: true
        volumes:
            - ./backend:/var/www 
            - ./backend/nginx.conf:/etc/nginx/conf.d/app.conf
        deploy:
            mode: replicated
            replicas: 1
            labels:
                traefik.api.frontend.rule: "PathPrefix:/api"
                traefik.uploads.frontend.rule: "PathPrefix:/uploads"
                traefik.logs.frontend.rule: "PathPrefix:/logs"
                traefik.port: "80"
                traefik.enable: "true"
                traefik.backend: "nginx"
                traefik.docker.network: "angaryos_backend-nw"
        networks:
            - backend-nw

    memcached:
        image: memcached
        networks:
            - backend-nw



    #######       DB       #######

    postgresql:
        hostname: 'postgresql'
        image: kartoza/postgis:12.0
        environment:
            - POSTGRES_DB=postgres
            - POSTGRES_USER=postgres
            - POSTGRES_PASS=seraHost2643**
            - ALLOW_IP_RANGE=0.0.0.0/0
        volumes:
            - ./services/postgresql/data:/var/lib/postgresql
        ports:
            - "5432:5432"
        networks:
            - db-nw

networks:
    frontend-nw:
    backend-nw:
    db-nw: